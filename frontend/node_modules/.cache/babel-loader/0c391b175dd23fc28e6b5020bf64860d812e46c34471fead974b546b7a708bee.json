{"ast":null,"code":"// /src/api/mockApi.js\n// IMPORTANTE: Isto simula seu backend Go.\n// Mais tarde, você substituirá as funções aqui por chamadas 'fetch' para seu servidor.\n\nimport { v4 as uuidv4 } from 'uuid'; // Vamos usar UUIDs como no Go\n\n// --- Nosso \"Banco de Dados\" Falso ---\nconst db = {\n  jogadores: [{\n    id: 'mestre-id',\n    nome: 'Mestre'\n  }, {\n    id: 'jogador-id',\n    nome: 'JogadorA'\n  }],\n  campanhas: [{\n    id: 'campanha-1',\n    nome: 'A Tumba do Horror',\n    mestre_id: 'mestre-id',\n    descricao: 'Uma campanha de terror...',\n    template_atributos_base: ['Força', 'Inteligência', 'Vontade', 'Agilidade'],\n    template_habilidades: ['Lutar', 'Investigar', 'Ocultismo'],\n    template_outros: ['Pontos de Vida', 'Pontos de Sanidade']\n  }],\n  personagens: [{\n    id: 'personagem-1',\n    nome: 'Grog, o Bárbaro',\n    jogador_id: 'jogador-id',\n    campanha_id: 'campanha-1',\n    descricao_fisica: 'Muito alto, muitas cicatrizes.',\n    caracteristicas: 'Não pensa muito.',\n    atributos_base: {\n      'Força': 18,\n      'Inteligência': 6,\n      'Vontade': 10,\n      'Agilidade': 12\n    },\n    habilidades: {\n      'Lutar': 5,\n      'Investigar': -1,\n      'Ocultismo': 0\n    },\n    outros: {\n      'Pontos de Vida': 20,\n      'Pontos de Sanidade': 8\n    },\n    inventario: []\n  }]\n};\n\n// --- Funções da API ---\n// Todas retornam Promises para simular uma chamada de rede.\n\n// Simula o \"login\"\nexport const apiLogin = nome => {\n  return new Promise(resolve => {\n    let jogador = db.jogadores.find(j => j.nome.toLowerCase() === nome.toLowerCase());\n    if (!jogador) {\n      jogador = {\n        id: uuidv4(),\n        nome\n      };\n      db.jogadores.push(jogador);\n    }\n    setTimeout(() => resolve(jogador), 300); // Simula delay\n  });\n};\n\n// --- API de Campanhas ---\nexport const apiGetCampanhas = () => {\n  return new Promise(resolve => setTimeout(() => resolve(db.campanhas), 300));\n};\nexport const apiGetCampanhaById = id => {\n  return new Promise(resolve => {\n    const campanha = db.campanhas.find(c => c.id === id);\n    setTimeout(() => resolve(campanha), 300);\n  });\n};\nexport const apiCreateCampanha = (mestreId, data) => {\n  return new Promise(resolve => {\n    const novaCampanha = {\n      ...data,\n      id: uuidv4(),\n      mestre_id: mestreId\n    };\n    db.campanhas.push(novaCampanha);\n    setTimeout(() => resolve(novaCampanha), 300);\n  });\n};\nexport const apiUpdateCampanha = (id, data) => {\n  return new Promise(resolve => {\n    const index = db.campanhas.findIndex(c => c.id === id);\n    if (index !== -1) {\n      db.campanhas[index] = {\n        ...db.campanhas[index],\n        ...data\n      };\n      setTimeout(() => resolve(db.campanhas[index]), 300);\n    }\n  });\n};\n\n// --- API de Personagens ---\nexport const apiGetPersonagensByCampanha = campanhaId => {\n  return new Promise(resolve => {\n    const personagens = db.personagens.filter(p => p.campanha_id === campanhaId);\n    setTimeout(() => resolve(personagens), 300);\n  });\n};\nexport const apiGetPersonagensByJogador = jogadorId => {\n  return new Promise(resolve => {\n    const personagens = db.personagens.filter(p => p.jogador_id === jogadorId);\n    setTimeout(() => resolve(personagens), 300);\n  });\n};\nexport const apiGetPersonagemById = id => {\n  return new Promise(resolve => {\n    const personagem = db.personagens.find(p => p.id === id);\n    setTimeout(() => resolve(personagem), 300);\n  });\n};\nexport const apiCreatePersonagem = data => {\n  return new Promise(resolve => {\n    const novoPersonagem = {\n      ...data,\n      id: uuidv4()\n    };\n    db.personagens.push(novoPersonagem);\n    setTimeout(() => resolve(novoPersonagem), 300);\n  });\n};\nexport const apiUpdatePersonagem = (id, data) => {\n  return new Promise(resolve => {\n    const index = db.personagens.findIndex(p => p.id === id);\n    if (index !== -1) {\n      db.personagens[index] = {\n        ...db.personagens[index],\n        ...data\n      };\n      setTimeout(() => resolve(db.personagens[index]), 300);\n    }\n  });\n};\n\n// Instale o UUID: npm install uuid","map":{"version":3,"names":["v4","uuidv4","db","jogadores","id","nome","campanhas","mestre_id","descricao","template_atributos_base","template_habilidades","template_outros","personagens","jogador_id","campanha_id","descricao_fisica","caracteristicas","atributos_base","habilidades","outros","inventario","apiLogin","Promise","resolve","jogador","find","j","toLowerCase","push","setTimeout","apiGetCampanhas","apiGetCampanhaById","campanha","c","apiCreateCampanha","mestreId","data","novaCampanha","apiUpdateCampanha","index","findIndex","apiGetPersonagensByCampanha","campanhaId","filter","p","apiGetPersonagensByJogador","jogadorId","apiGetPersonagemById","personagem","apiCreatePersonagem","novoPersonagem","apiUpdatePersonagem"],"sources":["C:/Users/Rafa/Desktop/codigos/gerenciador-de-fichas/frontend/src/api/mockApi.js"],"sourcesContent":["// /src/api/mockApi.js\r\n// IMPORTANTE: Isto simula seu backend Go.\r\n// Mais tarde, você substituirá as funções aqui por chamadas 'fetch' para seu servidor.\r\n\r\nimport { v4 as uuidv4 } from 'uuid'; // Vamos usar UUIDs como no Go\r\n\r\n// --- Nosso \"Banco de Dados\" Falso ---\r\nconst db = {\r\n  jogadores: [\r\n    { id: 'mestre-id', nome: 'Mestre' },\r\n    { id: 'jogador-id', nome: 'JogadorA' },\r\n  ],\r\n  campanhas: [\r\n    {\r\n      id: 'campanha-1',\r\n      nome: 'A Tumba do Horror',\r\n      mestre_id: 'mestre-id',\r\n      descricao: 'Uma campanha de terror...',\r\n      template_atributos_base: ['Força', 'Inteligência', 'Vontade', 'Agilidade'],\r\n      template_habilidades: ['Lutar', 'Investigar', 'Ocultismo'],\r\n      template_outros: ['Pontos de Vida', 'Pontos de Sanidade'],\r\n    },\r\n  ],\r\n  personagens: [\r\n    {\r\n      id: 'personagem-1',\r\n      nome: 'Grog, o Bárbaro',\r\n      jogador_id: 'jogador-id',\r\n      campanha_id: 'campanha-1',\r\n      descricao_fisica: 'Muito alto, muitas cicatrizes.',\r\n      caracteristicas: 'Não pensa muito.',\r\n      atributos_base: { 'Força': 18, 'Inteligência': 6, 'Vontade': 10, 'Agilidade': 12 },\r\n      habilidades: { 'Lutar': 5, 'Investigar': -1, 'Ocultismo': 0 },\r\n      outros: { 'Pontos de Vida': 20, 'Pontos de Sanidade': 8 },\r\n      inventario: [],\r\n    },\r\n  ],\r\n};\r\n\r\n// --- Funções da API ---\r\n// Todas retornam Promises para simular uma chamada de rede.\r\n\r\n// Simula o \"login\"\r\nexport const apiLogin = (nome) => {\r\n  return new Promise((resolve) => {\r\n    let jogador = db.jogadores.find((j) => j.nome.toLowerCase() === nome.toLowerCase());\r\n    if (!jogador) {\r\n      jogador = { id: uuidv4(), nome };\r\n      db.jogadores.push(jogador);\r\n    }\r\n    setTimeout(() => resolve(jogador), 300); // Simula delay\r\n  });\r\n};\r\n\r\n// --- API de Campanhas ---\r\nexport const apiGetCampanhas = () => {\r\n  return new Promise((resolve) => setTimeout(() => resolve(db.campanhas), 300));\r\n};\r\n\r\nexport const apiGetCampanhaById = (id) => {\r\n  return new Promise((resolve) => {\r\n    const campanha = db.campanhas.find((c) => c.id === id);\r\n    setTimeout(() => resolve(campanha), 300);\r\n  });\r\n};\r\n\r\nexport const apiCreateCampanha = (mestreId, data) => {\r\n  return new Promise((resolve) => {\r\n    const novaCampanha = {\r\n      ...data,\r\n      id: uuidv4(),\r\n      mestre_id: mestreId,\r\n    };\r\n    db.campanhas.push(novaCampanha);\r\n    setTimeout(() => resolve(novaCampanha), 300);\r\n  });\r\n};\r\n\r\nexport const apiUpdateCampanha = (id, data) => {\r\n    return new Promise((resolve) => {\r\n        const index = db.campanhas.findIndex(c => c.id === id);\r\n        if (index !== -1) {\r\n            db.campanhas[index] = { ...db.campanhas[index], ...data };\r\n            setTimeout(() => resolve(db.campanhas[index]), 300);\r\n        }\r\n    });\r\n};\r\n\r\n// --- API de Personagens ---\r\nexport const apiGetPersonagensByCampanha = (campanhaId) => {\r\n    return new Promise((resolve) => {\r\n        const personagens = db.personagens.filter(p => p.campanha_id === campanhaId);\r\n        setTimeout(() => resolve(personagens), 300);\r\n    });\r\n};\r\n\r\nexport const apiGetPersonagensByJogador = (jogadorId) => {\r\n    return new Promise((resolve) => {\r\n        const personagens = db.personagens.filter(p => p.jogador_id === jogadorId);\r\n        setTimeout(() => resolve(personagens), 300);\r\n    });\r\n};\r\n\r\nexport const apiGetPersonagemById = (id) => {\r\n    return new Promise((resolve) => {\r\n        const personagem = db.personagens.find(p => p.id === id);\r\n        setTimeout(() => resolve(personagem), 300);\r\n    });\r\n};\r\n\r\nexport const apiCreatePersonagem = (data) => {\r\n    return new Promise((resolve) => {\r\n        const novoPersonagem = {\r\n            ...data,\r\n            id: uuidv4(),\r\n        };\r\n        db.personagens.push(novoPersonagem);\r\n        setTimeout(() => resolve(novoPersonagem), 300);\r\n    });\r\n};\r\n\r\nexport const apiUpdatePersonagem = (id, data) => {\r\n    return new Promise((resolve) => {\r\n        const index = db.personagens.findIndex(p => p.id === id);\r\n        if (index !== -1) {\r\n            db.personagens[index] = { ...db.personagens[index], ...data };\r\n            setTimeout(() => resolve(db.personagens[index]), 300);\r\n        }\r\n    });\r\n};\r\n\r\n// Instale o UUID: npm install uuid"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}